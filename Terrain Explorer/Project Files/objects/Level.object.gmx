<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create the level
// Resize the room
room_width = (CELL_WIDTH/16)*720;
room_height = (CELL_HEIGHT/16)*720;

// Set the grid width and height
var width = room_width div CELL_WIDTH;
var height = room_height div CELL_HEIGHT;

// Create the grid
grid = ds_grid_create(width, height);

// Fill the grid with the void
ds_grid_set_region(grid, 0, 0, width-1, height-1, VOID);

// Randomize the world
randomize();

// Create the controller in the center of the grid
var cx = width div 2;
var cy = height div 2;

// Create the player
instance_create(cx*CELL_WIDTH + CELL_WIDTH/2, cy*CELL_HEIGHT + CELL_HEIGHT/2, Player);

// Give the controller random direction
var cdir = irandom(3);

// The odds variable for changing direction
var dir_odds = 1;

// Create the upper floor using 1000 steps
repeat (1000) {
    // Place a floor tile at the controller position
    grid[# cx, cy] = FLOOR;
    
    // Randomize the direction of the controller
    if (irandom(dir_odds) == dir_odds) {
        cdir = irandom(3);
    }
    
    // Move the controller
    var xdir = lengthdir_x(1, cdir*90);
    var ydir = lengthdir_y(1, cdir*90);
    cx += xdir;
    cy += ydir;
    
    // Make sure we don't move outside the grid
    cx = clamp(cx, 1, width-2);
    cy = clamp(cy, 1, height-2);
}

// Add the wall
for (var yy = 1; yy &lt; height-1; yy++) {
    for (var xx = 1; xx &lt; width-1; xx++) {
        if (grid[# xx, yy] == FLOOR) {
            // Check for wall
            if (grid[# xx+1, yy] != FLOOR) grid[# xx+1, yy] = WALL;
            if (grid[# xx-1, yy] != FLOOR) grid[# xx-1, yy] = WALL;
            if (grid[# xx, yy+1] != FLOOR) grid[# xx, yy+1] = WALL;
            if (grid[# xx, yy-1] != FLOOR) grid[# xx, yy-1] = WALL;
        }
    }
}

// Get tile size
var tw = CELL_WIDTH / 2;
var th = CELL_HEIGHT / 2;

// Add the tiles for upper floor
for (var yy = 0; yy &lt; height * 2; yy++) {
    for (var xx = 0; xx &lt; width * 2; xx++) {
        // Get the tile's x and y
        var tx = xx * tw;
        var ty = yy * th;
        
        // Draw default tile
        tile_add(bg_tile_nature, tw*6, th*6, tw, th, tx, ty, 0);
        
        // Check for floor    
        if (grid[# xx div 2, yy div 2] == FLOOR) {
                
            // Draw the floor
            var floor_odds = 9;
            if (irandom(floor_odds) == floor_odds) {
                if (irandom(1) == 0) tile_add(bg_tile_nature, tw*1, th*0, tw, th, tx, ty, 0);
                else tile_add(bg_tile_nature, tw*2, th*0, tw, th, tx, ty, 0);
            } else {
                tile_add(bg_tile_nature, tw*0, th*0, tw, th, tx, ty, 0);
                // Draw flower
                var flower_odds = 19;
                if (irandom(flower_odds) == flower_odds) {
                    if (irandom(3) == 0) tile_add(bg_tile_nature, tw*3, th*0, tw, th, tx, ty, -1);
                    if (irandom(3) == 1) tile_add(bg_tile_nature, tw*4, th*0, tw, th, tx, ty, -1);
                    if (irandom(3) == 2) tile_add(bg_tile_nature, tw*3, th*1, tw, th, tx, ty, -1);
                    if (irandom(3) == 3) tile_add(bg_tile_nature, tw*4, th*1, tw, th, tx, ty, -1);
                }
            }
            
            
            // Basic Direction
            var right = grid[# (xx+1) div 2, yy div 2] == WALL;
            var left = grid[# (xx-1) div 2, yy div 2] == WALL;
            var top = grid[# xx div 2, (yy-1) div 2] == WALL;
            var bottom = grid[# xx div 2, (yy+1) div 2] == WALL;
            
            // Top Diagonal Direction
            var top_right = grid[# (xx+1) div 2, (yy-1) div 2] != FLOOR;
            var top_left = grid[# (xx-1) div 2, (yy-1) div 2] != FLOOR;
            
            // Bottom Diagonal Direction
            var bottom_right = grid[# (xx+1) div 2, (yy+1) div 2] != FLOOR;
            var bottom_left = grid[# (xx-1) div 2, (yy+1) div 2] != FLOOR;
            
            // Draw tile based on Right Space
            if (right) {
                if (!top_right) {
                    tile_add(bg_tile_nature, tw*0, th*0, tw, th, tx+tw, ty, -ty+1);
                    tile_add(bg_tile_nature, tw*5, th*5, tw, th, tx+tw, ty, -ty);
                }
                else if (!bottom_right) {
                    tile_add(bg_tile_nature, tw*0, th*0, tw, th, tx+tw, ty, -ty+1);
                    tile_add(bg_tile_nature, tw*5, th*7, tw, th, tx+tw, ty, -ty);
                }
                else {
                    tile_add(bg_tile_nature, tw*0, th*0, tw, th, tx+tw, ty, -ty+1);
                    tile_add(bg_tile_nature, tw*5, th*6, tw, th, tx+tw, ty, -ty);
                }
            }
            
            // Draw tile based on Left Space
            if (left) {
                if (!top_left) {
                    tile_add(bg_tile_nature, tw*0, th*0, tw, th, tx-tw, ty, -ty+1);
                    tile_add(bg_tile_nature, tw*7, th*5, tw, th, tx-tw, ty, -ty);
                }
                else if (!bottom_left) {
                    tile_add(bg_tile_nature, tw*0, th*0, tw, th, tx-tw, ty, -ty+1);
                    tile_add(bg_tile_nature, tw*7, th*7, tw, th, tx-tw, ty, -ty);
                }
                else {
                    tile_add(bg_tile_nature, tw*0, th*0, tw, th, tx-tw, ty, -ty+1);
                    tile_add(bg_tile_nature, tw*7, th*6, tw, th, tx-tw, ty, -ty);
                }
            }
            
            // Draw tile based on Top Space
            if (top) {
                if (top_right &amp;&amp; top_left) {
                    tile_add(bg_tile_nature, tw*0, th*0, tw, th, tx, ty-th, 0);
                    tile_add(bg_tile_nature, tw*6, th*7, tw, th, tx, ty-th, -ty+th);
                }
            }
            
            // Draw tile based on Bottom Space
            if (bottom) {
                if (bottom_right &amp;&amp; bottom_left) {
                    tile_add(bg_tile_nature, tw*0, th*0, tw, th, tx, ty+th, 0);
                    tile_add(bg_tile_nature, tw*6, th*5, tw, th, tx, ty+th, -ty-th);
                }
            }
            
            // Draw Corner Tiles
            if (top &amp;&amp; right &amp;&amp; top_right) {
                tile_add(bg_tile_nature, tw*0, th*0, tw, th, tx+tw, ty-th, 0);
                tile_add(bg_tile_nature, tw*4, th*6, tw, th, tx+tw, ty-th, -ty+th);
            }
            if (top &amp;&amp; left &amp;&amp; top_left) {
                tile_add(bg_tile_nature, tw*0, th*0, tw, th, tx-tw, ty-th, 0);
                tile_add(bg_tile_nature, tw*3, th*6, tw, th, tx-tw, ty-th, -ty+th);
            }
            if (bottom &amp;&amp; right &amp;&amp; bottom_right) {
                tile_add(bg_tile_nature, tw*0, th*0, tw, th, tx+tw, ty+th, 0);
                tile_add(bg_tile_nature, tw*4, th*7, tw, th, tx+tw, ty+th, -ty-th);
            }
            if (bottom &amp;&amp; left &amp;&amp; bottom_left) {
                tile_add(bg_tile_nature, tw*0, th*0, tw, th, tx-tw, ty+th, 0);
                tile_add(bg_tile_nature, tw*3, th*7, tw, th, tx-tw, ty+th, -ty-th);
            }
        }
    }
}

// Add the lake
var lake_odds = 19;
for (var yy = 1; yy &lt; height-1; yy++) {
    for (var xx = 1; xx &lt; width-1; xx++) {
        if (grid[# xx, yy] == FLOOR) {
            if (grid[# xx+1, yy] == FLOOR &amp;&amp; grid[# xx-1, yy] == FLOOR 
            &amp;&amp; grid[# xx, yy+1] == FLOOR &amp;&amp; grid[# xx, yy-1] == FLOOR) {
                if (irandom(lake_odds) == lake_odds) {
                    cx = xx;
                    cy = yy;
                    // Create the lake floor using 50 steps
                    repeat (50) {
                        // Place a floor tile at the controller position
                        grid[# cx, cy] = LAKE;
                        
                        // Randomize the direction of the controller
                        if (irandom(dir_odds) == dir_odds) {
                            cdir = irandom(3);
                        }
                        
                        // Move the controller
                        var xdir = lengthdir_x(1, cdir*90);
                        var ydir = lengthdir_y(1, cdir*90);
                        cx += xdir;
                        cy += ydir;
                        
                        // Revert move in special cases
                        if (grid[# cx, cy] != FLOOR) {
                            cx -= xdir;
                            cy -= ydir;
                        } 
                    }
                }
            }
        }
    }
}

// Add the tiles for lake
for (var yy = 0; yy &lt; height * 2; yy++) {
    for (var xx = 0; xx &lt; width * 2; xx++) {
        // Get the tile's x and y
        var tx = xx * tw;
        var ty = yy * th;
        // Check for lake    
        if (grid[# xx div 2, yy div 2] == LAKE) {
            // Draw base tile
            tile_add(bg_tile_nature, tw*6, th*1, tw, th, tx, ty, 0);
            tile_add(bg_tile_nature, tw*6, th*1, tw, th, tx, ty, -1);
            
            // Basic Direction
            var right = grid[# (xx+1) div 2, yy div 2] == FLOOR;
            var left = grid[# (xx-1) div 2, yy div 2] == FLOOR;
            var top = grid[# xx div 2, (yy-1) div 2] == FLOOR;
            var bottom = grid[# xx div 2, (yy+1) div 2] == FLOOR;
            
            // Top Diagonal Direction
            var top_right = grid[# (xx+1) div 2, (yy-1) div 2] != LAKE;
            var top_left = grid[# (xx-1) div 2, (yy-1) div 2] != LAKE;
            
            // Bottom Diagonal Direction
            var bottom_right = grid[# (xx+1) div 2, (yy+1) div 2] != LAKE;
            var bottom_left = grid[# (xx-1) div 2, (yy+1) div 2] != LAKE;
            
            // Draw tile based on Right Space
            if (right) {
                tile_add(bg_tile_nature, tw*7, th*1, tw, th, tx, ty, -ty+th);
            }
            if (left) {
                tile_add(bg_tile_nature, tw*5, th*1, tw, th, tx, ty, -ty+th);
            }
            if (top) {
                tile_add(bg_tile_nature, tw*6, th*0, tw, th, tx, ty, -ty+th);
            }
            if (bottom) {
                tile_add(bg_tile_nature, tw*6, th*2, tw, th, tx, ty, -ty+th);
            }
            if (top &amp;&amp; right) {
                tile_add(bg_tile_nature, tw*7, th*0, tw, th, tx, ty, -ty+th);
            }
            if (top &amp;&amp; left) {
                tile_add(bg_tile_nature, tw*5, th*0, tw, th, tx, ty, -ty+th);
            }
            if (bottom &amp;&amp; right) {
                tile_add(bg_tile_nature, tw*7, th*2, tw, th, tx, ty, -ty+th);
            }
            if (bottom &amp;&amp; left) {
                tile_add(bg_tile_nature, tw*5, th*2, tw, th, tx, ty, -ty+th);
            }
        }
    }
}

// Touch up on corner between lake and floor
for (var yy = 0; yy &lt; height * 2; yy++) {
    for (var xx = 0; xx &lt; width * 2; xx++) {
        // Get the tile's x and y
        var tx = xx * tw;
        var ty = yy * th;
        // Check for floor    
        if (grid[# xx div 2, yy div 2] == FLOOR) {
            // Basic Direction
            var right = grid[# (xx+1) div 2, yy div 2] == LAKE;
            var left = grid[# (xx-1) div 2, yy div 2] == LAKE;
            var top = grid[# xx div 2, (yy-1) div 2] == LAKE;
            var bottom = grid[# xx div 2, (yy+1) div 2] == LAKE;
            
            // Top Diagonal Direction
            var top_right = grid[# (xx+1) div 2, (yy-1) div 2] == LAKE;
            var top_left = grid[# (xx-1) div 2, (yy-1) div 2] == LAKE;
            
            // Bottom Diagonal Direction
            var bottom_right = grid[# (xx+1) div 2, (yy+1) div 2] == LAKE;
            var bottom_left = grid[# (xx-1) div 2, (yy+1) div 2] == LAKE;
            
            if (top &amp;&amp; right &amp;&amp; top_right) {
                tile_add(bg_tile_nature, tw*6, th*3, tw, th, tx+tw, ty-th, -ty+th);
            }
            if (top &amp;&amp; left &amp;&amp; top_left) {
                tile_add(bg_tile_nature, tw*5, th*3, tw, th, tx-tw, ty-th, -ty+th);
            }
            if (bottom &amp;&amp; right &amp;&amp; bottom_right) {
                tile_add(bg_tile_nature, tw*6, th*4, tw, th, tx+tw, ty+th, -ty+th);
            }
            if (bottom &amp;&amp; left &amp;&amp; bottom_left) {
                tile_add(bg_tile_nature, tw*5, th*4, tw, th, tx-tw, ty+th, -ty+th);
            }
            
            // Modify direction
            var right_wall = grid[# (xx+1) div 2, yy div 2] == WALL;
            var left_wall = grid[# (xx-1) div 2, yy div 2] == WALL;
            var top_wall = grid[# xx div 2, (yy-1) div 2] == WALL;
            var bottom_wall = grid[# xx div 2, (yy+1) div 2] == WALL;
            
            if ((top &amp;&amp; right_wall &amp;&amp; top_right) || (top_wall &amp;&amp; right &amp;&amp; top_right)) { 
                tile_add(bg_tile_nature, tw*6, th*3, tw, th, tx+tw, ty-th, -ty+th);
            }
            if ((top &amp;&amp; left_wall &amp;&amp; top_left) || (top_wall &amp;&amp; left &amp;&amp; top_left)) { 
                tile_add(bg_tile_nature, tw*5, th*3, tw, th, tx-tw, ty-th, -ty+th);
            }
            if ((bottom &amp;&amp; right_wall &amp;&amp; bottom_right) || (bottom_wall &amp;&amp; right &amp;&amp; bottom_right)) { 
                tile_add(bg_tile_nature, tw*6, th*4, tw, th, tx+tw, ty+th, -ty+th);
            }
            if ((bottom &amp;&amp; left_wall &amp;&amp; bottom_left) || (bottom_wall &amp;&amp; left &amp;&amp; bottom_left)) { 
                tile_add(bg_tile_nature, tw*5, th*4, tw, th, tx-tw, ty+th, -ty+th);
            }
        }
        
        // Check for WALL
        if (grid[# xx div 2, yy div 2] == WALL) {
            // Basic Direction
            var right = grid[# (xx+1) div 2, yy div 2] == LAKE;
            var left = grid[# (xx-1) div 2, yy div 2] == LAKE;
            var top = grid[# xx div 2, (yy-1) div 2] == LAKE;
            var bottom = grid[# xx div 2, (yy+1) div 2] == LAKE;
            
            var top_right = grid[# (xx+1) div 2, (yy+1) div 2] == LAKE;
            var top_left = grid[# (xx-1) div 2, (yy+1) div 2] == LAKE;
            
            if (top &amp;&amp; right &amp;&amp; top_right) {
                tile_add(bg_tile_nature, tw*6, th*1, tw, th, tx, ty, 0);
                tile_add(bg_tile_nature, tw*6, th*1, tw, th, tx, ty, -1);
                tile_add(bg_tile_nature, tw*6, th*1, tw, th, tx, ty, -ty+1);
            }
            if (top &amp;&amp; left &amp;&amp; top_left) {
                tile_add(bg_tile_nature, tw*6, th*1, tw, th, tx, ty, 0);
                tile_add(bg_tile_nature, tw*6, th*1, tw, th, tx, ty, -1);
                tile_add(bg_tile_nature, tw*6, th*1, tw, th, tx, ty, -ty+1);
            }
        }
    }
}

// Add tree based on chance in different location
var tree_wall_odds = 24;
var tree_lake_odds = 23;
var tree_lone_odds = 49;
for (var yy = 1; yy &lt; height-1; yy++) {
    for (var xx = 1; xx &lt; width-1; xx++) {
        if (grid[# xx, yy] == FLOOR) &amp;&amp; (xx != width div 2 &amp;&amp; yy != height div 2) {
            var wall_count = 0;
            var lake_count = 0;
            if (grid[# xx+1, yy] == WALL) wall_count++;
            if (grid[# xx-1, yy] == WALL) wall_count++;
            if (grid[# xx, yy+1] == WALL) wall_count++;
            if (grid[# xx, yy-1] == WALL) wall_count++;
            
            if (grid[# xx+1, yy] == LAKE) lake_count++;
            if (grid[# xx-1, yy] == LAKE) lake_count++;
            if (grid[# xx, yy+1] == LAKE) lake_count++;
            if (grid[# xx, yy-1] == WALL) lake_count++;
            
            if (wall_count != 0) {
                if (irandom((tree_wall_odds+1)*(4-wall_count+1)-1) = ((tree_wall_odds+1)*(4-wall_count+1)-1)) {
                    grid[# xx, yy] = TREE;
                }
            } else if (lake_count != 0) {
                if (irandom((tree_lake_odds+1) div lake_count -1) = ((tree_lake_odds+1) div lake_count -1)) {
                    grid[# xx, yy] = TREE;
                }
            } else if (irandom(tree_lone_odds) = tree_lone_odds) {
                grid[# xx, yy] = TREE;
            }
        }
    }
}

// Draw tree
for (var yy = 0; yy &lt; height * 2; yy++) {
    for (var xx = 0; xx &lt; width * 2; xx++) {
        // Get the tile's x and y
        var tx = xx * tw;
        var ty = yy * th;
        // Check for floor    
        if (grid[# xx div 2, yy div 2] == TREE) {
            // Convert back to wall
            grid[# xx div 2, yy div 2] = WALL;
            
            // Draw manually
            tile_add(bg_tile_nature, tw*6, th*22, tw, th, tx, ty, -ty);
            tile_add(bg_tile_nature, tw*7, th*22, tw, th, tx+tw, ty, -ty);
            tile_add(bg_tile_nature, tw*6, th*23, tw, th, tx, ty+th, -ty);
            tile_add(bg_tile_nature, tw*7, th*23, tw, th, tx+tw, ty+th, -ty);
            tile_add(bg_tile_nature, tw*6, th*21, tw, th, tx, ty-th, -ty);
            tile_add(bg_tile_nature, tw*7, th*21, tw, th, tx+tw, ty-th, -ty);
        }
    }
}

// Add grass based on chance
var grass_odds = 39;
for (var yy = 1; yy &lt; height-1; yy++) {
    for (var xx = 1; xx &lt; width-1; xx++) {
        if (grid[# xx, yy] == FLOOR) {
            if (irandom(grass_odds) == grass_odds) {
                cx = xx;
                cy = yy;
                // Create the grass using 100 steps
                repeat (100) {
                    // Place a floor tile at the controller position
                    grid[# cx, cy] = GRASS;
                    
                    // Randomize the direction of the controller
                    if (irandom(dir_odds) == dir_odds) {
                        cdir = irandom(3);
                    }
                    
                    // Move the controller
                    var xdir = lengthdir_x(1, cdir*90);
                    var ydir = lengthdir_y(1, cdir*90);
                    cx += xdir;
                    cy += ydir;
                    
                    // Revert move in special cases
                    if (grid[# cx, cy] != FLOOR) {
                        cx -= xdir;
                        cy -= ydir;
                    } 
                }
            }
        }
    }
}

// Draw grass
var grass_spawn_odds = 1;
for (var yy = 0; yy &lt; height * 2; yy++) {
    for (var xx = 0; xx &lt; width * 2; xx++) {
        // Get the tile's x and y
        var tx = xx * tw;
        var ty = yy * th;
        // Check for floor    
        if (grid[# xx div 2, yy div 2] == GRASS) {
            // Draw manually
            if (irandom(grass_spawn_odds) == grass_spawn_odds) tile_add(bg_tile_nature, tw*7, th*3, tw, th, tx, ty, -1);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Switch between view ENABLE/DISABLE
if !view_enabled {
    view_visible[0] = true;
    view_enabled = true;
} else {
    view_visible[0] = false;
    view_enabled = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Restart the room
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0,5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0,100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0,100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0,100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0,200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
